---
# A set of values that are meant to be used for a production setup.
# This includes:
# - an external Postgres, GCS Storage, and external Redis
# - real email sending
# - studio production settings
#
# Note that the secrets will have to be filled up by the caller
# through helm upgrade --set. See REPLACEME placeholders
# for values that need to be set.

settings: contentcuration.production_settings

productionIngress: false

studioApp:
  imageName: "REPLACEME"
  postmarkApiKey: "REPLACEME"
  releaseCommit:
  replicas: 3
  gcs:
    enabled: true
  gDrive:
    keyJson:
  pgbouncer:
    replicas: 3
    pool_size: 10
    reserve_pool_size: 10

sentry:
  dsnKey: ""

studioNginx:
  imageName: "REPLACEME"

postgresql:
  postgresUser: "REPLACEME"
  postgresDatabase: "REPLACEME"
  postgresPassword: "REPLACEME"
  internalDBEnabled: false
  externalCloudSQL:
    enabled: true
    proxyHostName: "REPLACEME"

minio:
  internalMinioEnabled: false
  externalGoogleCloudStorage:
    enabled: true
    # make sure gcsKeyJson has been base64-d by the time it's passed into here
    gcsKeyJson: "REPLACEME"

redis:
  internalRedisEnabled: true

studioProber:
  imageName: "REPLACEME"
  newrelicKey: "REPLACEME"
  newrelicAccountId: "REPLACEME"
  port: 9313

# we should install the prometheus-operator manually, so we don't get duplicates.
# we only enable prometheus and grafana in here, and disable everything else.
prometheusOperator:
  enabled: false
  createCustomResource: false
kubeStateMetrics:
  enabled: false
coreDns:
  enabled: false
kubeControllerManager:
  enabled: false
kubeDns:
  enabled: false
kubeEtcd:
  enabled: false
kubeProxy:
  enabled: false
kubeScheduler:
  enabled: false
kubelet:
  enabled: false

# enable the node exporter, so we can get node USE stats in the same grafana dashboard
nodeExporter:
  enabled: true

prometheus:
  # if you want a servicemonitor scanned, make sure to set release={{ .Release.Name }}
  # in its label
  enabled: true
grafana:
  enabled: true